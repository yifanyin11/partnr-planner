prompt: |-
        - Overview:
        Your goal is to find the optimal next action for an agent collaborating with another agent in a multi-agent planning task. Find action for the agent as best as you can. The task assigned to you will be situated in a house and will generally involve navigating to objects, picking and placing them on different receptacles to achieve rearrangement. Below is the detailed description of different actions that the agent can use for solving the task. You can assign them to Agent_{id} as required. Remember to assign only 1 action to your agent. There will be another agent working in the same house trying to acomplish the same task. Your role is to enable Agent_{id} to finish the task together by collaborating with its partner agent.

        You should account for the task progress, locations of objects in the house, the partner agent's state, and your agent's observations to determine the next optimal action for your agent. The optimal action should be aimed at enabling faster and more efficient task completion. So avoid doing tasks that the partner agent is doing and instead focus on tasks that are left over and can be done in parallel.

        {tool_descriptions}


        Here are some examples of allocating optimal next actions to your agent in a given task:

        Example 1:
        Task:
        Move all objects from sofa to bedroom and place them next to the toy truck.

        House description:
        living_room_0: chair_0, chair_1, chair_2, chair_3, table_0, couch_0, couch_1, table_1, table_2, table_3
        closet_0: shelves_0
        bedroom_0: bed_0, chest_of_drawers_0, chest_of_drawers_1
        kitchen_1: cabinet_0, table_4, chair_4, chair_5, chair_6, chair_7
        bedroom_1: bed_1, chest_of_drawers_2, chest_of_drawers_3
        bedroom_2: bed_2, chest_of_drawers_4, chest_of_drawers_5, wardrobe_0, wardrobe_1
        laundryroom/mudroom_0: washer_dryer_0, washer_dryer_1, shelves_1, shelves_2
        bathroom_0: toilet_0
        bathroom_2: toilet_1
        bathroom_1: toilet_2
        kitchen_0: fridge_0
        garage_0: fridge_1

        Objects found in the house so far:
        cherry_0: couch_0
        apple_0: couch_0
        banana_0: couch_0

        Task progress:
        Agent 0 is walking.
        Agent 1 is waiting and ready to start collaborating.

        Your agent's observations of the last executed action (if available):


        Thought: Based on the task and the list of objects in the house, the current task-relevant objects are cherry_0, banana_0, apple_0 located on the couch_0, couch_0, and couch_0 respectively. The desired location for these objects is the bedroom, specifically next to the toy truck based on the task description. So I will choose the bed where toy truck is located as target location for these objects. However, it is unclear which bed is the toy truck on. So I will ask my agent to explore each bedroom with names bedroom_0, bedroom_1, and bedroom_2 in the house one by one. I will assign the "explore" action to the agent using the exact names of the rooms to prevent any confusion for the agent.
        Agent_1_Action: Explore[bedroom_0]
        Assigned!


        Example 2:
        Task:
        Move pillow to bed and then move apple to kitchen counter.

        House description:
        living_room_0: table_0, couch_0, chair_2, shelves_1, chair_5, chair_6, table_7, chair_7, chair_8, chair_9, chair_10, chair_11, chair_12, table_9, table_10, stand_0, chest_of_drawers_2
        laundryroom/mudroom_0: washer_dryer_0, washer_dryer_1, shelves_0
        bathroom_1: bathtub_0, table_11
        bedroom_1: table_1, chair_1, bed_0, table_4, table_5, chair_4, stool_0, bench_0, table_12, chest_of_drawers_3
        kitchen_0: cabinet_0, cabinet_1, cabinet_2, counter_0, chair_2, cabinet_3, cabinet_4, cabinet_5, chair_13, chair_14, chair_15, counter_1, cabinet_6, fridge_0, cabinet_7, cabinet_8
        bedroom_0: chair_0, table_2, table_3, bed_1, bench_2, chest_of_drawers_0, chest_of_drawers_1
        bathroom_0: chair_3, table_8, bench_1
        hallway_0: table_6
        entryway/foyer/lobby_0: bench_3

        Objects found in the house so far:
        pillow_0: bed_0
        pillow_1: agent_0
        laptop_0: table_1

        Task progress:
        Agent 0 moved the pillow_0 from chair to bed_0 and is currently carrying rearranging pillow_1.
        Agent 1 is currently waiting.

        Your agent's observations of the last executed action (if available):
        Agent_1_Observation: Node with name living room not present in the graph. The entity name may be wrong or the entity may not exist in the house. Use entity names that match with the names of rooms and furniture provided in the house description.

        Thought: Based on the task and the list of objects in the house, the task-relevant objects are pillow_0 and pillow_1 located on bed_0 and agent_0 respectively and apple, whose location is unknown. The task requires moving pillows first to the desired location of bed in bedroom. Since pillow_0 is already on bed_0, I will focus on pillow_1 and searching for apple. Since Agent 0 is still rearranging the pillow_1 to the bed_0, which needs to be rearranged before rearranging apple, I will let Agent 0 finish this part of the task. So, I will ask my agent 1 to search for apple instead in rooms that are likely to have an apple. From the house description, kitchen_0 and living_room_0 rooms are likely to have apples. So, I will ask my agent 1 to explore kitchen. Based on my agent's previous observation, it looks like the kitchen name used with the agent's previous action did not match the house description. So I will use the EXACT name of the kitchen provided in the house description when I assign action to my agent.
        Agent_1_Action: Explore[kitchen_0]
        Assigned!


        Example 3:
        Task:
        Move all towels from the kitchen to the bathroom.

        House description:
        living_room_0: couch_0, table_0, chair_0, chair_1, chair_2, table_1, chest_of_drawers_0, chest_of_drawers_1
        bathroom_0: toilet_0, table_2
        kitchen_0: chair_2, cabinet_0, cabinet_1, cabinet_2, cabinet_3, fridge_0, cabinet_4

        Objects found in the house so far:
        hand_towel_0: table_2
        hand_towel_1: bathroom_0
        bath_towel_0: table_2
        sponge_0: chair_2
        pen_0: table_0
        stuffed_toy_0: table_1

        Task progress:
        Agent 0 moved the hand_towel_0 from chair to table_2. Agent 0 moved bath_towel_0 to table_2.
        Agent 1 moved the hand_towel_1 to the bathroom_0.

        Your agent's observations of the last executed action (if available):
        Agent_0_observation: Successfull execution!

        Thought: Based on the task and the list of objects in the house, the task-relevant objects are hand_towel_0, hand_towel_1 and bath_towel_0, located on table_2, bathroom_0 and table_2 respectively. All agents have finished successful execution. Since the task is to move all towels to the bathroom and all towels are in the bathroom already and no towels are in the kitchen, the task is complete.
        Final Thought: Exit!

        Example 4:
        Task:
        Place stuffed toy and book on the shelves.

        House description:
        living_room_0: table_0, couch_0, chair_2, shelves_1, chair_5, chair_6, table_7, chair_7, chair_8, chair_9, chair_10, chair_11, chair_12, table_9, table_10, stand_0, chest_of_drawers_2
        laundryroom/mudroom_0: washer_dryer_0, washer_dryer_1, shelves_0
        bathroom_0: toilet_0
        bathroom_2: toilet_1
        bathroom_1: toilet_2
        kitchen_0: fridge_0

        Objects found in the house so far:
        stuffed_toy_0: table_1

        Task progress:
        Agent 0 is walking around.
        Agent 1 is currently waiting.

        Your agent's observations of the last executed action (if available):

        Thought: Based on the task and the list of objects in the house, the task-relevant objects are stuffed_toy_0 located on table_1 and book. The task requires moving them to the desired location of shelves either in the living room or the laundryroom. It is unclear where book is in the house. The other agent seems to be walking around and so it might find the book. The stuffed toy can be rearranged in the meantime. So, I will ask my agent 1 to rearrange the stuffed toy to one of the shelves.
        Agent_1_Action: Rearrange[stuffed_toy_0, on, shelves_1, None, None]
        Assigned!


        Example 5:
        Task:
        Put laptop and pen next to each other on the bed.

        House description:
        living_room_0: chair_0, chair_1, chair_2, chair_3, table_0, couch_0, couch_1, table_1, table_2, table_3
        bathroom_1: bathtub_0, table_11
        bedroom_1: chair_1, bed_0, table_4, table_5, chair_4, stool_0, bench_0, table_12, chest_of_drawers_3
        kitchen_0: cabinet_0, cabinet_1, cabinet_2, counter_0, chair_2, cabinet_3, cabinet_4, cabinet_5, chair_13, chair_14, chair_15, counter_1, cabinet_6, fridge_0, cabinet_7, cabinet_8
        bedroom_0: chair_0, table_2, table_3, bed_1, bench_2, chest_of_drawers_0, chest_of_drawers_1
        bathroom_0: chair_3, table_8, bench_1
        hallway_0: table_6

        Objects found in the house so far:
        apple_0: chair_2
        pen_0: bed_0
        laptop_0: table_1

        Task progress:
        Agent 0 is placed pen_0 on bed_0 and is now walking.
        Agent 1 is currently walking.

        Your agent's observations of the last executed action (if available):

        Thought: Based on the task and the list of objects in the house, the task-relevant objects are laptop_0 and pen_0, located on table_1 and bed_0 respectively. The task requires moving them to the desired location of bed in bedroom. Since the laptop and pen need to be placed next to each other and Agent 0 has already placed pen on the bed, I will ask my agent 1 to rearrange laptop next to the pen on the bed.
        Agent_1_Action: Rearrange[laptop_0, on, bed_0, next_to, pen_0]
        Assigned!

        Example 6:
        Task:
        Let's clear the plate and glasses from the living room table. Move them to the counter and place them next to each other.

        House description:
        living_room_0: couch_0, table_0, chair_0, chair_1, chair_2, table_1, chest_of_drawers_0, chest_of_drawers_1
        bathroom_0: toilet_0, table_2
        kitchen_0: cabinet_0, cabinet_1, cabinet_2, counter_0, chair_2, cabinet_3, cabinet_4, cabinet_5, chair_13, chair_14, chair_15, counter_1, cabinet_6, fridge_0, cabinet_7, cabinet_8
        bedroom_0: chair_0, table_2, table_3, bed_1, bench_2, chest_of_drawers_0, chest_of_drawers_1

        Objects found in the house so far:
        plate_0: table_1
        drinkware_0: agent_0
        drinkware_1: table_1
        lamp_0: table_1

        Task progress:
        Agent 0 is holding drinkware_0 and walking.
        Agent 1 is currently walking.

        Your agent's observations of the last executed action (if available):

        Thought: Based on the task and the list of objects in the house, the task-relevant objects are plate_0, drinkware_0, and drinkware_1 located on table_1, agent_0, and table_1 respectively. The task requires moving them to the desired location of counter next to each other. Since the other agent 0 is moving the drinkware_0 and drinkware_1 and plate_0 need to be placed next to it, I will ask my agent 1 to wait till till agent 0 finishes placing the drinkware_0.
        Agent_1_Action: Wait[]
        Assigned!

        Strictly follow the above format while solving given task.

        Task:
        {input}

        House description:
        {house_description}

        Objects found in the house so far:
        {all_objects}

        Task progress: {summary}

        Your agent's observations of the last executed action (if available): {agent0_obs}

        Thought:

# This is crucial, it's when the LLM stops generating text and waits for the
# environment to respond
stopword       : "Assigned!"

# End of the interaction.
end_expression : "Final Thought:"

# The parser is a function that maps LLM output to a tuple of (agent, action, action_input)
actions_parser:
  _target_     : habitat_llm.llm.instruct.utils.actions_parser

  # It's a function so we do partial initialization
  _partial_    : true

prompt_summarizer: |-
        - Overview:
        You are a task-summarizer. You are thus an expert in summarizing agent activities towards accomplishing a desired task based on the provided history of the agent actions.

        Given a sequence of actions representing the previous states/actions of two agents, summarize the overall activity performed by both the agents in a SINGLE sentence. The summary should be coherent and concise. The agent previous actions may include "standing," "walking," "picking up <object>," "placing on <location>, opening <object>, closing <object>, waiting" etc. Your goal is to generate a summary sentence that captures the progress the agents have made in accomplishing a given task. Use only past tense to represent task progress.

        Example 1:
        Task: Put the apple in the cabinet. Then, place bottle in the fridge.

        Agent_0_History: standing, walking, waiting, picking up bottle_0.
        Agent_1_History: walking, picking up apple_0, walking, opening cabinet_0, placing apple_0 in cabinet_0.

        Task progress summary:
        Agent 0: Agent 0 picked up the bottle_0.
        Agent 1: Agent 0 picked an apple and placed it in cabinet_0.
        Done!

        Example 2:
        Task: Put all toys in the bedroom.

        Agent_0_History: standing, walking, picking up toy_vehicle_0, walking, placing toy_vehicle_0 on bed_0, walking.
        Agent_1_History: standing, walking, picking up toy_fruits_0, walking, placing toy_fruits_0 on bed_0, walking, picking up toy_animal_1, walking.

        Task progress summary:
        Agent 0: Agent 0 rearranged toy_vehicle_0 to bed_0 and is currently walking somewhere.
        Agent 1: Agent 1 rearranged toy_fruits_0 to bed_0 and is currently moving with toy_animal_1 to rearrange it.
        Done!

        Example 3:
        Task: Put picture frame and spectacles on the table in bedroom.

        Agent_0_History: Idle.
        Agent_1_History: Idle.

        Task progress summary:
        Agent 0: Agent 0 hasn't taken any actions for the task yet and is currently waiting.
        Agent 1: Agent 1 hasn't taken any actions for the task yet and is currently waiting.
        Done!

        Example 4:
        Task: Put book on the shelves and apple in the fridge.

        Agent_0_History: standing, walking, picking up book_0, walking, placing book_0 on shelves_0, walking, picking up book_0, walking, placing book_0 on shelves_0
        Agent_1_History: standing, walking, waiting.

        Task progress summary:
        Agent 0: Agent 0 rearranged book_0 to shelves_0 multiple times.
        Agent 1: Agent 1 hasn't taken any actions for the task yet and is currently waiting.
        Done!

        Ensure that the summary is grammatically correct, concise i.e., a single sentence, and logically coherent. The summary should strictly be task-relevant and based on the sequence of actions of the agents and provided task description.

        Task: {input}
        Agent_0_History: {agent0_actions}
        Agent_1_History: {agent1_actions}
        Task progress summary:

stopword_summarizer : "Done!"
end_expression_summarizer : "Done!"
